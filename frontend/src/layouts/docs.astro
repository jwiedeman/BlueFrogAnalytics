---
import Main from './main.astro';
const { title = 'Docs', description = '', headings = [] } = Astro.props;

// gather docs files to build sidebar tree
const modules = import.meta.glob('../content/docs/**/*.mdx', { eager: true });
function buildTree() {
  const tree = [];
  for (const [path, mod] of Object.entries(modules)) {
    const slug = path.replace('../content/docs/', '').replace(/\.mdx$/, '');
    if (slug === 'index') continue;
    const segments = slug.split('/');
    let current = tree;
    for (let i = 0; i < segments.length; i++) {
      const seg = segments[i];
      let node = current.find(n => n.name === seg);
      if (!node) {
        node = { name: seg, label: seg.replace(/-/g, ' '), path: null, children: [] };
        current.push(node);
      }
      if (i === segments.length - 1) {
        node.path = '/docs/' + slug + '/';
        node.label = mod.frontmatter?.title || node.label;
      }
      current = node.children;
    }
  }
  return tree;
}
const docTree = buildTree();
function sortTree(nodes) {
  nodes.sort((a,b) => a.label.localeCompare(b.label));
  nodes.forEach(n => n.children && sortTree(n.children));
}
sortTree(docTree);
const current = Astro.url.pathname.replace(/\/$/, '').toLowerCase();
function findPath(nodes, parents = []) {
  for (const node of nodes) {
    const nodePath = node.path?.replace(/\/$/, '').toLowerCase();
    if (nodePath === current) return [...parents, node];
    if (node.children?.length) {
      const res = findPath(node.children, [...parents, node]);
      if (res) return res;
    }
  }
  return null;
}
const breadcrumb = findPath(docTree) || [];
---
<Main title={title}>
  <div class="flex">
    <aside class="docs-sidebar hidden lg:block w-64 overflow-y-auto p-4 text-sm">
      <nav>
        <ul class="space-y-1">
          {(() => {
            function render(nodes) {
              return nodes.map(n => (
                n.children.length ? (
                  <li>
                    <details open={breadcrumb.some(b => b.name === n.name)}>
                      <summary>{n.label}</summary>
                      <ul class="ml-4 space-y-1">
                        {render(n.children)}
                      </ul>
                    </details>
                  </li>
                ) : (
                  <li>
                    <a class={current === n.path.replace(/\/$/, '').toLowerCase() ? 'active' : ''} href={n.path}>{n.label}</a>
                  </li>
                )
              ));
            }
            return render(docTree);
          })()}
        </ul>
      </nav>
    </aside>
    <section class="flex-grow px-4 py-8" id="doc-main">
      <article class="prose lg:prose-xl dark:prose-invert mx-auto">
        <slot />
      </article>
    </section>
    <aside class="hidden xl:block w-48 overflow-y-auto p-4 text-sm">
      <nav>
        <ul id="toc">
          {headings.map(h => (
            <li class={`ml-${(h.depth - 1) * 4}`.replace('ml-0', '')}>
              <a
                href={`#${h.slug}`}
                class="border-border block py-1 pl-2.5 text-muted-foreground transition-colors duration-200 hover:text-primary"
                >{h.text}</a
              >
            </li>
          ))}
        </ul>
      </nav>
    </aside>
  </div>
  <script is:inline>
    const ids = [${headings.map((h) => `'${h.slug}'`).join(',')}];
    const toc = document.getElementById('toc');
    const links = ids.map((id) => toc.querySelector(`a[href="#${id}"]`));
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.id;
        const idx = ids.indexOf(id);
        if (idx === -1) return;
        const link = links[idx];
        if (entry.isIntersecting) {
          link.classList.add('border-primary', 'text-primary', 'font-medium', 'active');
        } else {
          link.classList.remove('border-primary', 'text-primary', 'font-medium', 'active');
        }
      });
    }, { threshold: 1 });
    ids.forEach((id) => {
      const el = document.getElementById(id);
      if (el) observer.observe(el);
    });
  </script>
</Main>
