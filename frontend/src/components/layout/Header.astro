---
const mainNav = [
  { label: 'Dashboard', link: '/dashboard', isDash: true },
  { label: 'Home', link: '/' },
  { label: 'About', link: '/about' },
  { label: 'Services', link: '/services' },
  { label: 'Membership', link: '/membership' },
  { label: 'Discord', link: '/discord' },
  { label: 'Contact', link: '/contact' },
  { label: 'Free Tools', link: '/testing' },
  { label: 'Blog', link: '/blog' },
  { label: 'Docs & Guides', link: '/docs' },
];

const currentPath = Astro.url.pathname === '/' ? '/' : Astro.url.pathname.replace(/\/$/, '').toLowerCase();

function isActive(item) {
  const link = item.link === '/' ? '/' : item.link.replace(/\/$/, '').toLowerCase();
  if (item.label === 'Docs & Guides') return currentPath.startsWith('/docs');
  if (item.label === 'Free Tools') return currentPath.startsWith('/testing');
  if (item.label === 'Blog') return currentPath.startsWith('/blog');
  if (link === '/') return currentPath === '/';
  return currentPath === link || currentPath.startsWith(link + '/');
}
---
<nav id="site-navbar" class="border-b bg-white dark:bg-gray-900">
  <div class="container mx-auto flex flex-wrap items-center justify-between p-4">
    <a class="text-xl font-bold" href="/">
      <span class="bluefrog-brand">BlueFrog</span><span>Analytics</span>
    </a>
    <button class="lg:hidden border rounded p-2" id="nav-toggle" aria-label="Toggle menu">☰</button>
    <div id="nav-content" class="w-full lg:w-auto hidden lg:flex flex-col lg:flex-row lg:items-center lg:space-x-4 mt-4 lg:mt-0">
      <ul class="flex flex-col lg:flex-row lg:space-x-4" id="main-nav">
        {mainNav.map(item => (
          <li class={item.isDash ? 'hidden' : ''} id={item.isDash ? 'dashboard-nav' : undefined}>
            <a href={item.link} class={`block px-3 py-2 hover:underline ${isActive(item) ? 'font-semibold underline' : ''}`}>{item.label}</a>
          </li>
        ))}
      </ul>
      <a id="login-btn" href="/login" class="mt-2 lg:mt-0 lg:ml-4 border px-3 py-2 rounded">Client Login</a>
      <div id="profile-menu" class="relative ml-0 lg:ml-4 hidden">
        <button id="profile-toggle" class="border px-3 py-2 rounded">Profile</button>
        <ul id="profile-dropdown" class="absolute right-0 mt-2 hidden bg-white border rounded shadow text-sm">
          <li><a href="/dashboard/profile" class="block px-4 py-2 hover:bg-gray-100">Profile</a></li>
          <li><a href="/dashboard/settings" class="block px-4 py-2 hover:bg-gray-100">Settings</a></li>
          <li><a href="/dashboard/billing" class="block px-4 py-2 hover:bg-gray-100">Billing</a></li>
          <li><hr class="my-1" /></li>
          <li><a id="logout-link" href="#" class="block px-4 py-2 hover:bg-gray-100">Logout</a></li>
        </ul>
      </div>
      <button id="theme-toggle" class="ml-0 lg:ml-4 border rounded p-2" aria-label="Toggle dark mode">
        <span id="theme-icon">🌙</span>
      </button>
    </div>
  </div>
</nav>

<script>
(() => {
  const toggleBtn = document.getElementById('nav-toggle');
  const navContent = document.getElementById('nav-content');
  if (toggleBtn && navContent) {
    toggleBtn.addEventListener('click', () => navContent.classList.toggle('hidden'));
  }

  const loginBtn = document.getElementById('login-btn');
  const profileMenu = document.getElementById('profile-menu');
  const dashNav = document.getElementById('dashboard-nav');

  const updateMenu = (logged) => {
    if (loginBtn && profileMenu) {
      if (logged) {
        loginBtn.textContent = 'Dashboard';
        loginBtn.setAttribute('href', '/dashboard');
        loginBtn.classList.remove('hidden');
        profileMenu.classList.remove('hidden');
      } else {
        loginBtn.textContent = 'Client Login';
        loginBtn.setAttribute('href', '/login');
        loginBtn.classList.remove('hidden');
        profileMenu.classList.add('hidden');
      }
    }
    if (dashNav) {
      dashNav.classList.toggle('hidden', !logged);
    }
  };

  const saved = localStorage.getItem('bfaLoggedIn');
  updateMenu(saved === 'true');

  const w = window;
  if (w.onAuthStateChanged && w.firebaseAuth) {
    w.onAuthStateChanged(w.firebaseAuth, (u) => updateMenu(!!u));
  } else {
    document.addEventListener('firebase-init', () => {
      if (w.onAuthStateChanged && w.firebaseAuth) {
        w.onAuthStateChanged(w.firebaseAuth, (u) => updateMenu(!!u));
      }
    }, { once: true });
  }

  const profileToggle = document.getElementById('profile-toggle');
  const profileDropdown = document.getElementById('profile-dropdown');
  if (profileToggle && profileDropdown) {
    profileToggle.addEventListener('click', () => profileDropdown.classList.toggle('hidden'));
  }

  const themeBtn = document.getElementById('theme-toggle');
  const themeIcon = document.getElementById('theme-icon');
  if (themeBtn && themeIcon) {
    const setTheme = (dark) => {
      document.documentElement.classList.toggle('dark', dark);
      themeIcon.textContent = dark ? '☀️' : '🌙';
      localStorage.setItem('bfaDarkMode', dark);
    };
    const savedDark = localStorage.getItem('bfaDarkMode') === 'true';
    setTheme(savedDark);
    themeBtn.addEventListener('click', () => setTheme(!document.documentElement.classList.contains('dark')));
  }
})();
</script>
