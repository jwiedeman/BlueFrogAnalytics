---
import BaseHead from './BaseHead.astro';
import CustomHeader from './CustomHeader.astro';
import CustomFooter from './CustomFooter.astro';

// Receive headings from page content
const { headings } = Astro.props;

// Build a nested tree structure from docs content
const modules = import.meta.glob('../content/docs/**/*.{md,mdx}', { eager: true });
function buildTree() {
  const tree = [];
  for (const [filePath, mod] of Object.entries(modules)) {
    let rawKey = filePath.replace('../content/docs/', '').replace(/\.(md|mdx)$/, '');
    if (rawKey === 'index') continue;
    const segments = rawKey.split('/');
    let siblings = tree;
    for (let i = 0; i < segments.length; i++) {
      const segment = segments[i];
      let node = siblings.find(n => n.name === segment);
      if (!node) {
        node = { name: segment, label: segment.replace(/-/g, ' '), path: null, children: [] };
        siblings.push(node);
      }
      siblings = node.children;
      if (i === segments.length - 1) {
        node.path = '/' + rawKey.toLowerCase() + '/';
        node.label = mod.frontmatter?.title || node.label;
      }
    }
  }
  return tree;
}
const docTree = buildTree();

---
<html lang="en">
  <head>
    <BaseHead />
  </head>
  <body>
    <CustomHeader />
    <div class="docs-container">
      <aside class="sidebar-left">
        <input id="doc-search" type="search" placeholder="Search docs..." />
        <ul class="doc-tree">
          {(() => {
            function renderNodes(nodes) {
              return nodes.map(node => {
                if (node.children?.length) {
                  return (
                    <li class="tree-node has-children">
                      <span class="node-label">{node.label}</span>
                      <ul>
                        {renderNodes(node.children)}
                      </ul>
                    </li>
                  );
                }
                return (
                  <li class="tree-node leaf">
                    <a href={node.path}>{node.label}</a>
                  </li>
                );
              });
            }
            return renderNodes(docTree);
          })()}
        </ul>
      </aside>
      <main id="main-content" class="docs-main">
        <slot />
      </main>
      <aside class="sidebar-right">
        <nav>
          <ul>
            {headings?.map(h => (
              <li><a href={`#${h.slug}`}>{h.text}</a></li>
            ))}
          </ul>
        </nav>
      </aside>
    </div>
    <CustomFooter />
    <script client:load>
      // Live filter for search
      const input = document.getElementById('doc-search');
      input.addEventListener('input', () => {
        const filter = input.value.toLowerCase();
        document.querySelectorAll('.sidebar-left .tree-node').forEach(li => {
          li.style.display = li.textContent.toLowerCase().includes(filter) ? '' : 'none';
        });
      });
      // Expand/collapse tree nodes
      document.querySelectorAll('.tree-node.has-children .node-label').forEach(span => {
        span.addEventListener('click', () => {
          span.parentElement.classList.toggle('expanded');
        });
      });
    </script>
  </body>
</html>