---
import BaseHead from './BaseHead.astro';
import CustomHeader from './CustomHeader.astro';
import CustomFooter from './CustomFooter.astro';

// Receive headings from page content
const { headings } = Astro.props;

// Build a nested tree structure from docs content
const modules = import.meta.glob('../content/docs/**/*.{md,mdx}', { eager: true });
function buildTree() {
  const tree = [];
  for (const [filePath, mod] of Object.entries(modules)) {
    let rawKey = filePath.replace('../content/docs/', '').replace(/\.(md|mdx)$/, '');
    if (rawKey === 'index') continue;
    const segments = rawKey.split('/');
    let siblings = tree;
    for (let i = 0; i < segments.length; i++) {
      const segment = segments[i];
      let node = siblings.find(n => n.name === segment);
      if (!node) {
        node = { name: segment, label: segment.replace(/-/g, ' '), path: null, children: [] };
        siblings.push(node);
      }
      siblings = node.children;
      if (i === segments.length - 1) {
        node.path = '/' + rawKey.toLowerCase() + '/';
        node.label = mod.frontmatter?.title || node.label;
      }
    }
  }
  return tree;
}
const docTree = buildTree();

---
<html lang="en">
  <head>
    <BaseHead />
  </head>
  <body>
    <CustomHeader />
    <div class="docs-container container-fluid">
      <aside class="sidebar-left">
        <input id="doc-search" type="search" placeholder="Search docs..." />
        <div class="accordion" id="docAccordion">
          {(() => {
            function renderNodes(nodes) {

              return nodes.map(node => {
                if (node.children?.length) {
                  return (
                    <li class="doc-folder">
                      <span class="folder-label">{node.label}</span>
                      <ul class="list-unstyled">
                        {renderNodes(node.children)}
                      </ul>
                    </li>
                  );
                }
                return (
                  <li class="doc-link-item">
                    <a href={node.path}>{node.label}</a>

                  </li>
                );
              });
            }
            return docTree.map((cat, i) => (
              <div class="accordion-item" key={i}>
                <h2 class="accordion-header" id={`heading-${i}`}> 
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target={`#acc-${i}`} aria-expanded="false" aria-controls={`acc-${i}`}> 
                    {cat.label}
                  </button>
                </h2>
                <div id={`acc-${i}`} class="accordion-collapse collapse" data-bs-parent="#docAccordion">
                  <div class="accordion-body p-0">
                    <ul class="list-unstyled">
                      {renderNodes(cat.children)}
                    </ul>
                  </div>
                </div>
              </div>
            ));
          })()}
        </div>
      </aside>
      <main id="main-content" class="docs-main">
        <slot />
      </main>
      <aside class="sidebar-right">
        <nav>
          <ul class="list-unstyled">
            {headings?.map(h => (
              <li style={`margin-left: ${h.depth * 0.5}rem`}>
                <a href={`#${h.slug}`}>{h.text}</a>
              </li>
            ))}
          </ul>
        </nav>
      </aside>
    </div>
    <CustomFooter />
    <script client:load>
      // Live filter for search
      const input = document.getElementById('doc-search');
      input.addEventListener('input', () => {
        const filter = input.value.toLowerCase();
        document.querySelectorAll('.doc-link-item').forEach(li => {
          li.style.display = li.textContent.toLowerCase().includes(filter) ? '' : 'none';
        });
        document.querySelectorAll('.doc-folder').forEach(folder => {
          const visible = Array.from(folder.querySelectorAll('.doc-link-item')).some(li => li.style.display !== 'none');
          folder.style.display = visible ? '' : 'none';
        });
        document.querySelectorAll('.accordion-item').forEach(item => {
          const visible = Array.from(item.querySelectorAll('.doc-link-item')).some(li => li.style.display !== 'none');
          item.style.display = visible ? '' : 'none';
        });
      });

      // Keep current page link highlighted and its folder open
      const current = window.location.pathname.replace(/\/$/, '').toLowerCase();
      const link = Array.from(document.querySelectorAll('.sidebar-left a')).find(a => {
        const href = a.getAttribute('href');
        if (!href) return false;
        return href.replace(/\/$/, '').toLowerCase() === current;
      });
      if (link) {
        link.classList.add('active');
        const item = link.closest('.accordion-item');
        if (item) {
          item.classList.add('show');
          const heading = item.querySelector('.accordion-button');
          if (heading) heading.setAttribute('aria-expanded', 'true');
        }
      }
    </script>
  </body>
</html>