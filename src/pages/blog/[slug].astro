---
import { getCollection, getEntryBySlug } from 'astro:content';
import BlogLayout from '../../components/BlogLayout.astro';
import BlogPostCard from '../../components/BlogPostCard.astro';
import { applyGitDates } from '../../utils/git-dates.js';

function slugify(str) {
  return String(str)
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');
}

export async function getStaticPaths() {
  const posts = (await getCollection('blog')).filter(p => p.data.published);
  return posts.map(p => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params;
const post = await getEntryBySlug('blog', slug);
if (!post || !post.data.published) throw new Error('Post not found');
applyGitDates(post);

const pageTitle = post.data.title;
const pageDesc = post.data.description ?? '';

const { Content } = await post.render();

const words = post.body.split(/\s+/g).length;
const readingTime = Math.max(1, Math.ceil(words / 200));

const allPosts = (await getCollection('blog')).filter(p => p.data.published);
allPosts.forEach(applyGitDates);
const relatedPosts = allPosts
  .filter(p => p.slug !== slug && p.data.tags?.some(t => post.data.tags?.includes(t)))
  .sort((a, b) => (b.data.pubDate?.valueOf() ?? 0) - (a.data.pubDate?.valueOf() ?? 0))
  .slice(0, 4);

---
<BlogLayout title={pageTitle} description={pageDesc}>
  <article class="blog-article">
    <header class="mb-4 pb-3 border-bottom">
      <div class="container">
        <div class="row">
          <div class="col-lg-8 offset-lg-2">
            <nav aria-label="Breadcrumb" class="mb-2">
              <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/blog">Blog</a></li>
                <li class="breadcrumb-item active" aria-current="page">{post.data.title}</li>
              </ol>
            </nav>
            <h1 class="display-4">{post.data.title}</h1>
            {post.data.originalPubDate && (
              <p class="text-muted mb-0">
                {post.data.author ? (
                  <>
                    <a href={`/blog/authors/${slugify(post.data.author)}`} class="text-decoration-none">{post.data.author}</a>{' '}•{' '}
                  </>
                ) : ''}
                {post.data.originalPubDate.toLocaleDateString()} • {readingTime} min read
              </p>
            )}
            {post.data.updatedDate && post.data.updatedDate.getTime() !== post.data.originalPubDate?.getTime() ? (
              <p class="text-muted">Updated {post.data.updatedDate.toLocaleDateString()}</p>
            ) : null}
          </div>
        </div>
      </div>
    </header>

    <section class="mb-5">
      <div class="container">
        <div class="row">
          <div class="col-lg-8 offset-lg-2">
            <Content />
          </div>
        </div>
      </div>
    </section>

    {post.data.tags?.length ? (
      <footer class="border-top pt-3 pb-5">
        <div class="container">
          <div class="row">
            <div class="col-lg-8 offset-lg-2">
              <p class="mb-0">
                {post.data.tags.map(t => (
                  <a href={`/blog/tags/${t}`} class="badge bg-secondary me-1" key={t}>{t}</a>
                ))}
              </p>
            </div>
          </div>
        </div>
      </footer>
    ) : null}
  </article>

  {relatedPosts.length ? (
    <section class="container mb-5">
      <h2 class="h4 mb-3">Related Posts</h2>
      <div class="row g-4">
        {relatedPosts.map(p => (
          <div class="col-md-6 col-lg-3" key={p.slug}>
            <BlogPostCard post={p} />
          </div>
        ))}
      </div>
    </section>
  ) : null}
</BlogLayout>
