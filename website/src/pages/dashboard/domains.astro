---
import DashboardLayout from '../../components/DashboardLayout.astro';

const title = 'Domains';
const description = 'Manage your monitored domains.';
const domainList = [];
---
<DashboardLayout title={title} description={description}>
  <section class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="mb-0">Domains</h1>
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#domain-modal">Add Domain</button>
    </div>
    <p class="text-muted small mb-4">
      Frequency controls how often we crawl your domain. Deleting only removes the domain from your dashboard; we continue monitoring it for overall insights.
    </p>
    <div class="d-none d-md-flex fw-bold border-bottom pb-2 mb-3">
      <div class="col">Domain</div>
      <div class="col-auto">Frequency</div>
      <div class="col-auto">Actions</div>
    </div>
    <div id="domainList" class="domain-list"></div>
  </section>

  <div class="modal fade" id="domain-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content bg-dark text-light">
        <form id="domain-form">
          <div class="modal-header border-0">
            <h5 class="modal-title">Add Domain</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="domain-input" class="form-label">Domain</label>
              <input id="domain-input" type="text" class="form-control" placeholder="example.com" required />
            </div>
            <div class="mb-3">
              <label for="rate-limit" class="form-label">Max Workers Per Second</label>
              <input id="rate-limit" type="number" class="form-control" min="1" placeholder="1-50+" />
            </div>
            <div class="mb-3">
              <label for="frequency-select" class="form-label">Refresh Frequency</label>
              <select id="frequency-select" class="form-select">
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
              </select>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="consent-check" required />
              <label class="form-check-label" for="consent-check">
                I have permission to crawl and test this domain.
              </label>
            </div>
          </div>
          <div class="modal-footer border-0">
            <button type="submit" class="btn btn-primary w-100">Add Domain</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const API_BASE =
        window.API_BASE_URL || 'https://api.bluefroganalytics.com:6001';
      const listEl = document.getElementById('domainList');
      const formEl = document.getElementById('domain-form');
      const inputEl = document.getElementById('domain-input');
      const freqInput = document.getElementById('frequency-select');
      const consentEl = document.getElementById('consent-check');
      const modalEl = document.getElementById('domain-modal');
      let profile = null;
      let domains = [];
      const render = () => {
        listEl.innerHTML = '';
        if (!domains.length) {
          listEl.innerHTML = '<p>No domains added.</p>';
          return;
        }
        domains.forEach((dom, i) => {
          const item = document.createElement('div');
          item.className = 'row align-items-center pb-2 mb-3 border-bottom domain-row';
          item.innerHTML = `
            <div class="col domain-name">${dom.name}</div>
            <div class="col-auto">
              <select class="form-select form-select-sm me-2 frequency-select" data-index="${i}">
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
              </select>
            </div>
            <div class="col-auto">
              <button class="btn btn-sm btn-danger" data-action="delete" data-index="${i}">Delete</button>
            </div>`;
          item.querySelector('.frequency-select').value = dom.frequency || 'daily';
          listEl.appendChild(item);
        });
      };

      const save = async user => {
        if (!profile) return;
        const token = await user.getIdToken();
        await fetch(`${API_BASE}/api/profile`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`
          },
          body: JSON.stringify({
            firstName: profile.first_name || '',
            lastName: profile.last_name || '',
            email: profile.email || '',
            phone: profile.phone || '',
            paymentPreference: profile.payment_preference || '',
            domains,
            tests: profile.tests || {}
          })
        });
      };

      const init = () => {
        window.onAuthStateChanged(window.firebaseAuth, async user => {
          if (!user) {
            window.location.href = '/login';
            return;
          }
          const token = await user.getIdToken();
          const res = await fetch(`${API_BASE}/api/profile`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          if (res.ok) {
            profile = await res.json();
            domains = Array.isArray(profile.domains)
              ? profile.domains.map(d =>
                  typeof d === 'string' ? { name: d, frequency: 'daily' } : d
                )
              : [];
            render();
          }

          const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
          formEl.addEventListener('submit', async e => {
            e.preventDefault();
            const name = inputEl.value.trim();
            const freq = freqInput.value;
            if (!name || !consentEl.checked) return;
            domains.push({ name, frequency: freq });
            await save(user);
            inputEl.value = '';
            consentEl.checked = false;
            modal.hide();
            render();
          });

          listEl.addEventListener('click', async e => {
            const idx = e.target.dataset.index;
            if (e.target.dataset.action === 'delete' && idx !== undefined) {
              domains.splice(parseInt(idx, 10), 1);
              await save(user);
              render();
            }
          });

          listEl.addEventListener('change', async e => {
            if (e.target.classList.contains('frequency-select')) {
              const idx = e.target.dataset.index;
              if (idx !== undefined) {
                domains[parseInt(idx, 10)].frequency = e.target.value;
                await save(user);
              }
            }
          });
        });
      };

      if (window.firebaseAuth) {
        init();
      } else {
        document.addEventListener('firebase-init', init, { once: true });
      }
    });
  </script>
</DashboardLayout>
