---
import DashboardLayout from '../../components/DashboardLayout.astro';

const title = 'Leads';
const description = 'View and purchase collected leads.';
---
<DashboardLayout title={title} description={description}>
  <section class="container py-5">
    <h1 class="text-center mb-4">Leads</h1>
    <ul class="nav nav-pills mb-4" id="lead-tabs">
      <li class="nav-item">
        <button class="nav-link active" data-type="maps">Maps Leads</button>
      </li>
      <li class="nav-item">
        <button class="nav-link" data-type="domains">Domains</button>
      </li>
    </ul>
    <div class="row mb-3 g-2 align-items-end">
      <div class="col-md-6">
        <input id="lead-search" type="text" class="form-control" placeholder="Search" />
      </div>
      <div class="col-auto">
        <button id="lead-search-btn" class="btn btn-secondary">Search</button>
      </div>
      <div class="col-auto">
        <button id="download-csv" class="btn btn-primary d-none" disabled>Download CSV</button>
      </div>
      <div class="col-auto">
        <span id="selected-count" class="small text-muted"></span>
      </div>
    </div>
    <div class="table-responsive">
      <table class="table table-striped">
        <thead id="lead-head"></thead>
        <tbody id="lead-body"></tbody>
      </table>
    </div>
    <div class="d-flex justify-content-between align-items-center mt-3">
      <button id="prev-page" class="btn btn-secondary" disabled>Previous</button>
      <span id="page-info"></span>
      <button id="next-page" class="btn btn-secondary" disabled>Next</button>
    </div>
  </section>
  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const API_BASE =
        window.API_BASE_URL || 'https://api.bluefroganalytics.com:6001';
      const headEl = document.getElementById('lead-head');
      const bodyEl = document.getElementById('lead-body');
      const searchEl = document.getElementById('lead-search');
      const searchBtn = document.getElementById('lead-search-btn');
      const prevBtn = document.getElementById('prev-page');
      const nextBtn = document.getElementById('next-page');
      const pageInfo = document.getElementById('page-info');
      const tabs = document.querySelectorAll('#lead-tabs .nav-link');
      let type = 'maps';
      let page = 1;
      const selected = new Map();
      const downloadBtn = document.getElementById('download-csv');
      const countEl = document.getElementById('selected-count');

      const updateCount = () => {
        const count = selected.size;
        countEl.textContent = count ? `${count} selected` : '';
        downloadBtn.disabled = count === 0;
      };

      const downloadCsv = () => {
        const lines = [];
        if (type === 'domains') {
          lines.push('Domain');
          selected.forEach(cols => {
            lines.push(cols[0]);
          });
        } else {
          lines.push('Business,Address,Phone,Website');
          selected.forEach(cols => {
            const escaped = cols.map(c => `"${c.replace(/"/g, '""')}"`);
            lines.push(escaped.join(','));
          });
        }
        const blob = new Blob([lines.join('\n')], { type: 'text/csv' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = 'leads.csv';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      };

      const render = data => {
        headEl.innerHTML = '';
        bodyEl.innerHTML = '';
        const rows = data.results;
        downloadBtn.classList.toggle('d-none', rows.length === 0);
        const buildKey = r =>
          type === 'domains'
            ? r.domain
            : `${r.name || ''}|${r.address || ''}|${r.phone || ''}`;
        if (type === 'domains') {
          headEl.innerHTML =
            '<tr><th><input type="checkbox" id="lead-select-all" /></th><th>Domain</th></tr>';
          if (!rows.length) {
            bodyEl.innerHTML = '<tr><td colspan="2" class="text-center">No leads found.</td></tr>';
          } else {
            rows.forEach(r => {
              const key = buildKey(r);
              const tr = document.createElement('tr');
              tr.innerHTML = `\n              <td><input type="checkbox" class="form-check-input lead-cb" data-key="${key}"/></td>\n              <td>${r.domain}</td>\n            `;
              bodyEl.appendChild(tr);
            });
          }
        } else {
          headEl.innerHTML =
            '<tr><th><input type="checkbox" id="lead-select-all" /></th><th>Business</th><th>Address</th><th>Phone</th><th>Website</th></tr>';
          if (!rows.length) {
            bodyEl.innerHTML = '<tr><td colspan="5" class="text-center">No leads found.</td></tr>';
          } else {
            rows.forEach(r => {
              const key = buildKey(r);
              const tr = document.createElement('tr');
              tr.innerHTML = `\n              <td><input type="checkbox" class="form-check-input lead-cb" data-key="${key}"/></td>\n              <td>${r.name || ''}</td><td>${r.address || ''}</td><td>${r.phone || ''}</td><td>${r.website || ''}</td>\n            `;
              bodyEl.appendChild(tr);
            });
          }
        }
        bodyEl.querySelectorAll('.lead-cb').forEach(cb => {
          const key = cb.dataset.key;
          if (selected.has(key)) cb.checked = true;
          cb.addEventListener('change', () => {
            if (cb.checked) {
              const row = cb.closest('tr');
              const cols = Array.from(row.querySelectorAll('td')).slice(1).map(td => td.textContent.trim());
              selected.set(key, cols);
            } else {
              selected.delete(key);
            }
            updateCount();
          });
        });
        const selectAll = document.getElementById('lead-select-all');
        if (selectAll) {
          selectAll.checked = Array.from(bodyEl.querySelectorAll('.lead-cb')).every(cb => cb.checked);
          selectAll.addEventListener('change', () => {
            bodyEl.querySelectorAll('.lead-cb').forEach(cb => {
              cb.checked = selectAll.checked;
              cb.dispatchEvent(new Event('change'));
            });
          });
        }
        const totalPages = Math.max(1, Math.ceil(data.total / data.pageSize));
        pageInfo.textContent = `Page ${data.page} of ${totalPages}`;
        prevBtn.disabled = data.page <= 1;
        nextBtn.disabled = data.page >= totalPages;
        updateCount();
      };

      const load = async user => {
        if (window.showSpinner) window.showSpinner();
        const token = await user.getIdToken();
        const url = new URL('/api/leads', API_BASE);
        url.searchParams.set('type', type);
        url.searchParams.set('page', page);
        const q = searchEl.value.trim();
        if (q) url.searchParams.set('q', q);
        try {
          const res = await fetch(url.toString(), {
            headers: { Authorization: `Bearer ${token}` }
          });
          if (res.ok) {
            render(await res.json());
          }
        } catch {}
        if (window.hideSpinner) window.hideSpinner();
      };

      const init = () => {
        if (window.showSpinner) window.showSpinner();
        window.onAuthStateChanged(window.firebaseAuth, user => {
          if (!user) {
            window.location.href = '/login';
            return;
          }
          load(user);
          searchEl.addEventListener('input', () => {
            page = 1;
            load(user);
          });
          searchEl.addEventListener('keyup', e => {
            if (e.key === 'Enter') {
              page = 1;
              load(user);
            }
          });
          if (searchBtn) {
            searchBtn.addEventListener('click', () => {
              page = 1;
              load(user);
            });
          }
          prevBtn.addEventListener('click', () => {
            if (page > 1) {
              page--;
              load(user);
            }
          });
          nextBtn.addEventListener('click', () => {
            page++;
            load(user);
          });
          tabs.forEach(tab => {
            tab.addEventListener('click', () => {
              tabs.forEach(t => t.classList.remove('active'));
              tab.classList.add('active');
              type = tab.dataset.type;
              page = 1;
              load(user);
            });
          });
          downloadBtn.addEventListener('click', downloadCsv);
          if (window.hideSpinner) window.hideSpinner();
        });
      };
      if (window.firebaseAuth) {
        init();
      } else {
        document.addEventListener('firebase-init', init, { once: true });
      }
    });
  </script>
</DashboardLayout>
