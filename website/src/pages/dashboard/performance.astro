---
import DashboardLayout from '../../components/DashboardLayout.astro';

const title = 'Performance';
const description = 'View performance metrics.';
---
  <DashboardLayout title={title} description={description}>
    <section class="container py-5 text-center">
      <h1>Performance</h1>
      <form id="perf-form" class="row g-3 justify-content-center mb-4">
        <div class="col-auto">
          <input
            type="text"
            class="form-control"
            id="perf-url"
            placeholder="https://example.com"
          />
        </div>
        <div class="col-auto">
          <button type="submit" class="btn btn-primary">Run Test</button>
        </div>
      </form>
      <div id="perf-alert" class="alert d-none" role="alert"></div>
      <div id="perf-results" class="table-responsive d-none">
        <table class="table table-dark table-striped">
          <tbody id="perf-body"></tbody>
        </table>
      </div>
    </section>
  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const formEl = document.getElementById('perf-form');
      const urlEl = document.getElementById('perf-url');
      const alertEl = document.getElementById('perf-alert');
      const resultsEl = document.getElementById('perf-results');
      const bodyEl = document.getElementById('perf-body');

      const showAlert = (msg, type = 'danger') => {
        alertEl.textContent = msg;
        alertEl.className = `alert alert-${type}`;
        alertEl.classList.remove('d-none');
      };

      const renderResults = data => {
        bodyEl.innerHTML = '';
        const metrics = [
          ['Performance Score', Math.round((data.categories.performance.score || 0) * 100)],
          ['First Contentful Paint', data.audits['first-contentful-paint'].displayValue],
          ['Speed Index', data.audits['speed-index'].displayValue],
          ['Largest Contentful Paint', data.audits['largest-contentful-paint'].displayValue],
          ['Time To Interactive', data.audits.interactive.displayValue],
          ['Total Blocking Time', data.audits['total-blocking-time'].displayValue],
          ['Cumulative Layout Shift', data.audits['cumulative-layout-shift'].displayValue]
        ];
        for (const [label, value] of metrics) {
          const tr = document.createElement('tr');
          tr.innerHTML = `<th>${label}</th><td>${value}</td>`;
          bodyEl.appendChild(tr);
        }
        resultsEl.classList.remove('d-none');
      };

      const init = () => {
        window.onAuthStateChanged(window.firebaseAuth, user => {
          if (!user) {
            window.location.href = '/login';
            return;
          }
          formEl.addEventListener('submit', async e => {
            e.preventDefault();
            const url = urlEl.value.trim();
            if (!url) {
              showAlert('Enter a URL');
              return;
            }
            const token = await user.getIdToken();
            const res = await fetch('https://www.api.bluefroganalytics.com/api/performance', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${token}`
              },
              body: JSON.stringify({ url })
            });
            if (res.ok) {
              const data = await res.json();
              renderResults(data);
              alertEl.classList.add('d-none');
            } else {
              const data = await res.json();
              showAlert(data.error || 'Error running test');
            }
          });
        });
      };
      if (window.firebaseAuth) {
        init();
      } else {
        document.addEventListener('firebase-init', init, { once: true });
      }
    });
  </script>
</DashboardLayout>
