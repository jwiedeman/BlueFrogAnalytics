---
import DashboardLayout from '../../components/DashboardLayout.astro';

const title = 'Performance';
const description = 'View performance metrics.';
---
  <DashboardLayout title={title} description={description}>
    <section class="container py-5 text-center">
      <h1>Performance</h1>
      <form id="perf-form" class="row g-3 justify-content-center mb-4">
        <div class="col-auto">
          <input
            type="text"
            class="form-control"
            id="perf-url"
            placeholder="https://example.com"
          />
        </div>
        <div class="col-auto">
          <button type="submit" class="btn btn-primary">Run Test</button>
        </div>
      </form>
      <div id="perf-alert" class="alert d-none" role="alert"></div>
      <div id="perf-results" class="row d-none">
        <div class="col-12 col-lg-6 mb-4">
          <h3>Mobile</h3>
          <div class="table-responsive">
            <table class="table table-dark table-striped">
              <tbody id="perf-body-mobile"></tbody>
            </table>
          </div>
        </div>
        <div class="col-12 col-lg-6 mb-4">
          <h3>Desktop</h3>
          <div class="table-responsive">
            <table class="table table-dark table-striped">
              <tbody id="perf-body-desktop"></tbody>
            </table>
          </div>
        </div>
      </div>
    </section>
  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const API_BASE =
        window.API_BASE_URL || 'https://api.bluefroganalytics.com:6001';
      const formEl = document.getElementById('perf-form');
      const urlEl = document.getElementById('perf-url');
      const alertEl = document.getElementById('perf-alert');
      const resultsEl = document.getElementById('perf-results');
      const bodyMobile = document.getElementById('perf-body-mobile');
      const bodyDesktop = document.getElementById('perf-body-desktop');

      const thresholds = {
        score: { good: 90, ok: 50 },
        fcp: { good: 1800, ok: 3000 },
        speed: { good: 3400, ok: 5800 },
        lcp: { good: 2500, ok: 4000 },
        tti: { good: 3800, ok: 7300 },
        tbt: { good: 200, ok: 600 },
        cls: { good: 0.1, ok: 0.25 }
      };

      const getRating = (type, value, higherIsBetter = false) => {
        const { good, ok } = thresholds[type];
        if (higherIsBetter) {
          if (value >= good) return 'text-success';
          if (value >= ok) return 'text-warning';
          return 'text-danger';
        }
        if (value <= good) return 'text-success';
        if (value <= ok) return 'text-warning';
        return 'text-danger';
      };

      const showAlert = (msg, type = 'danger') => {
        alertEl.textContent = msg;
        alertEl.className = `alert alert-${type}`;
        alertEl.classList.remove('d-none');
      };

      const buildRows = (lhr, el) => {
        el.innerHTML = '';
        const table = el.parentElement;
        const isDark = document.documentElement.classList.contains('dark-mode');
        table.className = `table table-striped${isDark ? ' table-dark' : ''}`;
        const metrics = [
          {
            label: 'Performance Score',
            value: Math.round((lhr.categories.performance.score || 0) * 100),
            type: 'score',
            numeric: Math.round((lhr.categories.performance.score || 0) * 100)
          },
          {
            label: 'First Contentful Paint',
            value: lhr.audits['first-contentful-paint'].displayValue,
            type: 'fcp',
            numeric: lhr.audits['first-contentful-paint'].numericValue
          },
          {
            label: 'Speed Index',
            value: lhr.audits['speed-index'].displayValue,
            type: 'speed',
            numeric: lhr.audits['speed-index'].numericValue
          },
          {
            label: 'Largest Contentful Paint',
            value: lhr.audits['largest-contentful-paint'].displayValue,
            type: 'lcp',
            numeric: lhr.audits['largest-contentful-paint'].numericValue
          },
          {
            label: 'Time To Interactive',
            value: lhr.audits.interactive.displayValue,
            type: 'tti',
            numeric: lhr.audits.interactive.numericValue
          },
          {
            label: 'Total Blocking Time',
            value: lhr.audits['total-blocking-time'].displayValue,
            type: 'tbt',
            numeric: lhr.audits['total-blocking-time'].numericValue
          },
          {
            label: 'Cumulative Layout Shift',
            value: lhr.audits['cumulative-layout-shift'].displayValue,
            type: 'cls',
            numeric: lhr.audits['cumulative-layout-shift'].numericValue
          }
        ];
        for (const m of metrics) {
          const cls = getRating(m.type, m.numeric, m.type === 'score');
          const tr = document.createElement('tr');
          tr.innerHTML = `<th>${m.label}</th><td class="${cls}">${m.value}</td>`;
          el.appendChild(tr);
        }
      };

      const renderResults = data => {
        buildRows(data.mobile, bodyMobile);
        buildRows(data.desktop, bodyDesktop);
        resultsEl.classList.remove('d-none');
      };

      const init = () => {
        window.onAuthStateChanged(window.firebaseAuth, user => {
          if (!user) {
            window.location.href = '/login';
            return;
          }
          formEl.addEventListener('submit', async e => {
            e.preventDefault();
            const url = urlEl.value.trim();
            if (!url) {
              showAlert('Enter a URL');
              return;
            }
            const token = await user.getIdToken();
            const res = await fetch(`${API_BASE}/api/performance`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${token}`
              },
              body: JSON.stringify({ url })
            });
            if (res.ok) {
              const data = await res.json();
              renderResults(data);
              alertEl.classList.add('d-none');
            } else {
              const data = await res.json();
              showAlert(data.error || 'Error running test');
            }
          });
        });
      };
      if (window.firebaseAuth) {
        init();
      } else {
        document.addEventListener('firebase-init', init, { once: true });
      }
    });
  </script>
</DashboardLayout>
