---
import DashboardLayout from '../../components/DashboardLayout.astro';

const title = 'Performance';
const description = 'View performance metrics.';
---
  <DashboardLayout title={title} description={description}>
    <section class="container py-5">
      <div class="text-center mb-4">
        <h1 class="mb-0">Performance</h1>
      </div>
      <div class="row justify-content-center mb-4">
        <div class="col-md-4">
          <label for="perf-domain-select" class="form-label">Select Domain</label>
          <select id="perf-domain-select" class="form-select"></select>
        </div>
      </div>
      <div id="domain-summary" class="row mb-4 d-none">
        <div class="col-12">
          <h2 class="h5">Latest Domain Results</h2>
        </div>
        <div class="col-12 col-lg-6 mb-4">
          <h3>Mobile</h3>
          <div class="table-responsive">
            <table class="table table-dark table-striped">
              <tbody id="domain-body-mobile"></tbody>
            </table>
          </div>
        </div>
        <div class="col-12 col-lg-6 mb-4">
          <h3>Desktop</h3>
          <div class="table-responsive">
            <table class="table table-dark table-striped">
              <tbody id="domain-body-desktop"></tbody>
            </table>
          </div>
        </div>
      </div>
      <div id="pages-summary" class="table-responsive mb-5 d-none">
        <h2 class="h5 mb-3">Page Scores</h2>
        <table class="table table-dark table-striped">
          <thead>
            <tr>
              <th>URL</th>
              <th>Mobile</th>
              <th>Desktop</th>
            </tr>
          </thead>
          <tbody id="pages-body"></tbody>
        </table>
      </div>
    </section>
  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const API_BASE =
        window.API_BASE_URL || 'https://api.bluefroganalytics.com:6001';
      const domainSelect = document.getElementById('perf-domain-select');
      const domainEl = document.getElementById('domain-summary');
      const domainBodyMobile = document.getElementById('domain-body-mobile');
      const domainBodyDesktop = document.getElementById('domain-body-desktop');
      const pagesEl = document.getElementById('pages-summary');
      const pagesBody = document.getElementById('pages-body');

      const thresholds = {
        score: { good: 90, ok: 50 },
        fcp: { good: 1800, ok: 3000 },
        speed: { good: 3400, ok: 5800 },
        lcp: { good: 2500, ok: 4000 },
        tti: { good: 3800, ok: 7300 },
        tbt: { good: 200, ok: 600 },
        cls: { good: 0.1, ok: 0.25 }
      };

      const getRating = (type, value, higherIsBetter = false) => {
        const { good, ok } = thresholds[type];
        if (higherIsBetter) {
          if (value >= good) return 'text-success';
          if (value >= ok) return 'text-warning';
          return 'text-danger';
        }
        if (value <= good) return 'text-success';
        if (value <= ok) return 'text-warning';
        return 'text-danger';
      };

      const buildSavedRows = (metrics, prefix, el) => {
        if (!metrics) return;
        el.innerHTML = '';
        const table = el.parentElement;
        const isDark = document.documentElement.classList.contains('dark-mode');
        table.className = `table table-striped${isDark ? ' table-dark' : ''}`;
        const rows = [
          {
            label: 'Performance Score',
            value: metrics[`${prefix}_performance_score`],
            type: 'score'
          },
          {
            label: 'First Contentful Paint',
            value: metrics[`${prefix}_first_contentful_paint`],
            type: 'fcp'
          },
          {
            label: 'Speed Index',
            value: metrics[`${prefix}_speed_index`],
            type: 'speed'
          },
          {
            label: 'Largest Contentful Paint',
            value: metrics[`${prefix}_largest_contentful_paint`],
            type: 'lcp'
          },
          {
            label: 'Time To Interactive',
            value: metrics[`${prefix}_interactive`],
            type: 'tti'
          },
          {
            label: 'Total Blocking Time',
            value: metrics[`${prefix}_total_blocking_time`],
            type: 'tbt'
          },
          {
            label: 'Cumulative Layout Shift',
            value: metrics[`${prefix}_cumulative_layout_shift`],
            type: 'cls'
          }
        ];
        const format = v =>
          typeof v === 'number' ? `${(v / 1000).toFixed(1)} s` : '--';
        for (const m of rows) {
          const val =
            m.type === 'score' && typeof m.value === 'number'
              ? m.value
              : format(m.value);
          const num = m.type === 'score' ? m.value : m.value;
          const cls = getRating(m.type, num, m.type === 'score');
          const tr = document.createElement('tr');
          tr.innerHTML = `<th>${m.label}</th><td class="${cls}">${val}</td>`;
          el.appendChild(tr);
        }
      };
      const renderDomain = data => {
        buildSavedRows(data, 'mobile', domainBodyMobile);
        buildSavedRows(data, 'desktop', domainBodyDesktop);
        domainEl.classList.remove('d-none');
      };

      const renderPages = list => {
        pagesBody.innerHTML = '';
        const badge = score => {
          if (typeof score !== 'number') return 'bg-secondary';
          if (score >= 90) return 'bg-success';
          if (score >= 50) return 'bg-warning';
          return 'bg-danger';
        };
        for (const p of list) {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${p.url}</td>
            <td><span class="badge ${badge(p.mobile_performance_score)}">${
            p.mobile_performance_score ?? '--'
          }</span></td>
            <td><span class="badge ${badge(p.desktop_performance_score)}">${
            p.desktop_performance_score ?? '--'
          }</span></td>`;
          pagesBody.appendChild(row);
        }
        if (list.length) pagesEl.classList.remove('d-none');
      };

      const loadDomain = async (user, name) => {
        const token = await user.getIdToken();
        try {
          const di = await fetch(
            `${API_BASE}/api/domain-info?domain=${encodeURIComponent(name)}`,
            { headers: { Authorization: `Bearer ${token}` } }
          );
          if (di.ok) renderDomain(await di.json());
        } catch {}
        try {
          const dp = await fetch(
            `${API_BASE}/api/domain-pages?domain=${encodeURIComponent(name)}`,
            { headers: { Authorization: `Bearer ${token}` } }
          );
          if (dp.ok) renderPages(await dp.json());
        } catch {}
      };

      const loadProfile = async user => {
        const token = await user.getIdToken();
        try {
          const r = await fetch(`${API_BASE}/api/profile`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          if (r.ok) {
            const profile = await r.json();
            const list = Array.isArray(profile.domains) ? profile.domains : [];
            domainSelect.innerHTML = '';
            list.forEach(d => {
              const opt = document.createElement('option');
              opt.value = d;
              opt.textContent = d;
              domainSelect.appendChild(opt);
            });
            if (list.length) loadDomain(user, list[0]);
          }
        } catch {}
      };

      const init = () => {
        window.onAuthStateChanged(window.firebaseAuth, async user => {
          if (!user) {
            window.location.href = '/login';
            return;
          }
          await loadProfile(user);
          domainSelect.addEventListener('change', () => {
            loadDomain(user, domainSelect.value);
          });
        });
      };
      if (window.firebaseAuth) {
        init();
      } else {
        document.addEventListener('firebase-init', init, { once: true });
      }
    });
  </script>
</DashboardLayout>
